#!/usr/bin/env bash

DEBUG="${DEBUG:-0}"
if [[ "${DEBUG}" = 1 ]]; then
    set -x
fi

set -e
set -o pipefail
# DEFAULTS may be overridden by calling environment.
GRADLE="${GRADLE:-gradle}"
GRADLEW="${GRADLEW:-gradlew}"
GRADLE_BUILDFILE="${GRADLE_BUILDFILE:-build.gradle}"
GRADLE_KTS_BUILDFILE="${GRADLE_KTS_BUILDFILE:-build.gradle.kts}"

die() {
    echo -e "${@}" >&2
    exit 1
}

lookup() {
    local file="${1}"
    local curr_path="${2}"
    [[ -z "${curr_path}" ]] && curr_path="${PWD}"

    # Search recursively upwards for file.
    until [[ "${curr_path}" == "/" ]]; do
        if [[ -e "${curr_path}/${file}" ]]; then
            echo "${curr_path}/${file}"
            break
        else
            curr_path=$(dirname "${curr_path}")
        fi
    done
}

select_gradle() {
    local dir="${1}"

    # Use project's gradlew if found.
    local gradlew=$(lookup "${GRADLEW}" "${dir}")
    if [[ -z "${gradlew}" ]]; then
        die "No ${GRADLEW} set up for this project; Please use 'gng --bootstrap \${version}'."
    else
        echo "${gradlew}"
        return 0
    fi

    return 1
}

execute_gradle() {
    local build_gradle=$(lookup "${GRADLE_BUILDFILE}")
    local build_gradle_kts=$(lookup "${GRADLE_KTS_BUILDFILE}")
    local gradle=$(select_gradle)

    if [[ -n "${build_gradle}" ]] || [[ -n "${build_gradle_kts}" ]]; then
        local ktsDirName="$(dirname "${build_gradle_kts}")"
        local dirName="$(dirname "${build_gradle}")"
        if ((${#ktsDirName} > ${#dirName}))
        then
            build_gradle=${build_gradle_kts}
        fi
        # We got a good build file, start gradlew there.
        cd "$(dirname "${build_gradle}")"
    else
        die "Unable to find a gradle build file named ${GRADLE_BUILDFILE} or ${GRADLE_KTS_BUILDFILE}."
    fi

    # Say what we are gonna do, then do it.
    echo "Using gradle at '${gradle}' to run buildfile '${build_gradle}'"
    "${gradle}" "$@"
}

function install() {
    local saved_params=()
    local gradle_version="latest"
    local distType="bin"
    if [[ $# -gt 0 ]]; then
        gradle_version="$1"
        shift
    fi
    if [[ $# -gt 0 ]]; then
        distType="$1"
        shift
    fi
    case "${distType}" in
    "all"|"bin")
    ;;
    *)
    die "wrong distType: ${distType}(all, bin)"
    ;;
    esac

    if [[ "${gradle_version}" = "latest" ]]; then
        echo "Fetching the latest Gradle version"
        local gradle_version_info=$(curl -sSL "https://services.gradle.org/versions/current")
        gradle_version=$(echo "$gradle_version_info" | python -c "import json,sys;obj=json.load(sys.stdin);print obj['version'];")
    fi


    local gradle_home=$(mktemp -d)
    trap 'rm -rf ${gradle_home}' EXIT
    echo "Running the embedded wrapper ..."
    java -classpath /opt/gng/gradle/wrapper/gradle-wrapper.jar org.gradle.wrapper.GradleWrapperMain  \
 -q -g "${gradle_home}" -I "/opt/gng/gradle/init.gradle"  \
 --no-daemon -Pver=${gradle_version} -PdistType=${distType} wrapper
    # Clean the temporary cache dir
    rm -rf .gradle
}

if [[ "--bootstrap" = "$1" ]]; then
    which java > /dev/null 2>&1 || die "ERROR: no 'java' command could be found in your PATH."
    shift
    install "$@"
else
    execute_gradle "$@"
    exit $?
fi
