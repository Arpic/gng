#!/usr/bin/env bash
readonly SAVED_OPTS="$(
  shopt -po
  shopt -p
)"
SOURCE="${BASH_SOURCE[0]}"
while [ -h "$SOURCE" ]; do # resolve $SOURCE until the file is no longer a symlink
  TARGET="$(readlink "$SOURCE")"
  if [[ $TARGET == /* ]]; then
    SOURCE="$TARGET"
  else
    DIR="$(dirname "$SOURCE")"
    SOURCE="$DIR/$TARGET" # if $SOURCE was a relative symlink, we need to resolve it relative to the path where the symlink file was located
  fi
done
DIR="$(cd -P "$(dirname "$SOURCE")" >/dev/null 2>&1 && pwd)"

# shellcheck disable=SC1090
source "${DIR}/common.sh" || {
  echo "Failed to load common.sh in ${DIR}"
  exit 1
}

GWO_AGENT="${HOME}/.gradle/gwo-agent.jar"
GWO_AGENT_CFG="${HOME}/.gradle/gwo-agent.cfg"
if [ -f "${GWO_AGENT}" ] && [ -f "${GWO_AGENT_CFG}" ]; then
  while IFS='=' read -r k v; do
    case "${k}" in
    url)
      GWO_DISTRIBUTION_URL="${v}"
      ;;
    esac
  done <"${GWO_AGENT_CFG}"
fi
readonly GWO_DISTRIBUTION_URL

# DEFAULTS may be overridden by calling environment.
readonly GRADLE="${GRADLE:-gradle}"
readonly GRADLEW="${GRADLEW:-gradlew}"
readonly GRADLE_BUILDFILE="${GRADLE_BUILDFILE:-build.gradle}"
readonly GRADLE_KTS_BUILDFILE="${GRADLE_KTS_BUILDFILE:-build.gradle.kts}"

lookup() {
  local file="${1}"
  local curr_path="${2}"
  [[ -z "${curr_path}" ]] && curr_path="${PWD}"

  # Search recursively upwards for file.
  until [[ "${curr_path}" == "/" ]]; do
    if [[ -e "${curr_path}/${file}" ]]; then
      echo "${curr_path}/${file}"
      break
    else
      curr_path=$(dirname "${curr_path}")
    fi
  done
}

function copyWrapper() {
  cp -fR "${__GRADLE_HOME__}/gradle" .
  cp -f "${__GRADLE_HOME__}/gradlew" .
  cp -f "${__GRADLE_HOME__}/gradlew.bat" .
}

__GRADLE_HOME__=$(mktemp -d -t gng)
__EMPTY_GRADLE_BUILD_FILE="${__GRADLE_HOME__}/build.gradle"
[ -f "${__EMPTY_GRADLE_BUILD_FILE}" ] || {
  touch "${__EMPTY_GRADLE_BUILD_FILE}"
}
#trap 'rm -rf ${__GRADLE_HOME__}' EXIT
#Embedded Gradle Wrapper
function __gradlew__() {
  (
    # Restore shell options
    eval "${SAVED_OPTS}"
    java -classpath /opt/gng/gradle/wrapper/gradle-wrapper.jar org.gradle.wrapper.GradleWrapperMain \
      -q --no-daemon -g "${__GRADLE_HOME__}" -I "${DIR}/../gradle/init.gradle" -b "${__EMPTY_GRADLE_BUILD_FILE}" "$@"
  )
}

select_gradle() {
  local dir="${1}"
  # Use project's gradlew if found.
  local gradlew
  gradlew=$(lookup "${GRADLEW}" "${dir}")
  if [[ -z "${gradlew}" ]]; then
    err "No ${GRADLEW} set up for this project; Please use 'gng --bootstrap' installing a Gradle Wrapper'."
    return 1
  else
    echo "${gradlew}"
    return 0
  fi

  return 1
}

gradle() {
  local gradle
  gradle=$(select_gradle "${PWD}")
  info "Using gradle at '${gradle}' to run"
  (
    # Restore shell options
    eval "${SAVED_OPTS}"
    if [ -n "${GWO_DISTRIBUTION_URL}" ]; then
      info "Replacing gradlew distributionUrl with ${GWO_DISTRIBUTION_URL} using gwo-agent."
      export GRADLE_OPTS="${GRADLE_OPTS:-} -javaagent:${GWO_AGENT}=distributionUrl~=@https://services.gradle.org/distributions@${GWO_DISTRIBUTION_URL}/@"
    fi
    "${gradle}" "$@"
  )
}

function install() {
  local gradle_version="latest"
  local distType="bin"
  if [[ $# -gt 0 ]]; then
    gradle_version="$1"
    shift
  fi
  if [[ $# -gt 0 ]]; then
    distType="$1"
    shift
  fi
  case "${distType}" in
  "all" | "bin") ;;

  *)
    die "wrong distType: ${distType}(all, bin)"
    ;;
  esac

  if [[ "${gradle_version}" == "latest" ]]; then
    info "Fetching the latest Gradle version"
    local gradle_version_info
    gradle_version_info=$(curl -sSL "https://services.gradle.org/versions/current")
    gradle_version=$(echo "$gradle_version_info" | python -c "import json,sys;obj=json.load(sys.stdin);print obj['version'];")
  fi

  info "Running the embedded wrapper ..."
  __gradlew__ -Pver="${gradle_version}" -PdistType="${distType}" -PgwoUrl="${GWO_DISTRIBUTION_URL:-}" wrapper
  # Clean the temporary cache dir
  rm -rf .gradle
}

#Support `gradle init` behavior
init() {
  info "Initializing a Gradle project ..."
  local gradle
  gradle=$(select_gradle)
  if [[ -z ${gradle} ]]; then
    install
    gradle=$(select_gradle)
  fi
  "${gradle}" "$@"
}

case "${1:-}" in
--bootstrap)
  command -v java >/dev/null 2>&1 || die "ERROR: no 'java' command could be found in your PATH."
  shift
  install "$@"
  ;;
init)
  init "$@"
  ;;
*)
  gradle "$@"
  ;;
esac
